// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	authsvc "github.com/alextanhongpin/go-service-oriented-package/app/authsvc"

	mock "github.com/stretchr/testify/mock"
)

// RegisterRepo is an autogenerated mock type for the registerRepo type
type RegisterRepo[T interface{}, V interface{}] struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, params
func (_m *RegisterRepo[T, V]) Create(ctx context.Context, params authsvc.CreateUserParams[T]) (*V, error) {
	ret := _m.Called(ctx, params)

	var r0 *V
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, authsvc.CreateUserParams[T]) (*V, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, authsvc.CreateUserParams[T]) *V); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*V)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, authsvc.CreateUserParams[T]) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRegisterRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewRegisterRepo creates a new instance of RegisterRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRegisterRepo[T interface{}, V interface{}](t mockConstructorTestingTNewRegisterRepo) *RegisterRepo[T, V] {
	mock := &RegisterRepo[T, V]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
