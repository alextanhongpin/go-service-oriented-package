// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/alextanhongpin/go-service-oriented-package/domain"
	mock "github.com/stretchr/testify/mock"

	otp "github.com/alextanhongpin/go-service-oriented-package/app/otp"
)

// SendOtp is an autogenerated mock type for the sendOtp type
type SendOtp struct {
	mock.Mock
}

// Allow provides a mock function with given fields: ctx, dto
func (_m *SendOtp) Allow(ctx context.Context, dto otp.SendOtpDto) error {
	ret := _m.Called(ctx, dto)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, otp.SendOtpDto) error); ok {
		r0 = rf(ctx, dto)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSession provides a mock function with given fields: ctx, dto, _a2
func (_m *SendOtp) CreateSession(ctx context.Context, dto otp.SendOtpDto, _a2 domain.OTP) error {
	ret := _m.Called(ctx, dto, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, otp.SendOtpDto, domain.OTP) error); ok {
		r0 = rf(ctx, dto, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GenerateOtp provides a mock function with given fields: ctx
func (_m *SendOtp) GenerateOtp(ctx context.Context) (domain.OTP, error) {
	ret := _m.Called(ctx)

	var r0 domain.OTP
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (domain.OTP, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) domain.OTP); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(domain.OTP)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendMessage provides a mock function with given fields: ctx, dto, _a2
func (_m *SendOtp) SendMessage(ctx context.Context, dto otp.SendOtpDto, _a2 domain.OTP) error {
	ret := _m.Called(ctx, dto, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, otp.SendOtpDto, domain.OTP) error); ok {
		r0 = rf(ctx, dto, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewSendOtp interface {
	mock.TestingT
	Cleanup(func())
}

// NewSendOtp creates a new instance of SendOtp. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSendOtp(t mockConstructorTestingTNewSendOtp) *SendOtp {
	mock := &SendOtp{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
